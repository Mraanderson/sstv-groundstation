#!/usr/bin/env bash
# SSTV Groundstation Unified Launcher

set -u
APP_DIR="$HOME/sstv-groundstation"
REPO_URL="https://github.com/Mraanderson/sstv-groundstation.git"
FILES_DIR="$HOME/sstv-files"
SERVICE_FILE="$HOME/.config/systemd/user/sstv-groundstation.service"
PORT="${PORT:-5000}" ENV="${ENV:-development}"
GREEN="\033[92m"; RED="\033[91m"; RESET="\033[0m"

msg() { echo -e "$1$2${RESET}"; }
have_repo() { [ -d "$APP_DIR/.git" ]; }
have_service() { [ -f "$SERVICE_FILE" ]; }

# --- Status line ---
status_line() {
  if ! have_repo; then
    msg "$RED" "Groundstation installed : no"
  else
    cd "$APP_DIR" || return
    local branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    msg "$GREEN" "Groundstation installed : yes | Branch: $branch"
  fi
  if have_service; then
    msg "$GREEN" "Systemd service installed : yes"
  else
    msg "$RED" "Systemd service installed : no"
  fi
}

# --- Clone repo ---
clone_repo() {
  git clone -b main "$REPO_URL" "$APP_DIR" && msg "$GREEN" "Repository cloned."
}

# --- Requirements check ---
check_requirements() {
  echo "Checking system requirements..."
  for bin in sox rtl_sdr python3 ffmpeg; do
    if command -v "$bin" >/dev/null 2>&1; then
      msg "$GREEN" "✔ $bin found: $(command -v $bin)"
    else
      msg "$RED" "⚠ $bin NOT found – some features may not work"
    fi
  done
}

# --- Git helpers ---
pull_update() {
  have_repo || { msg "$RED" "No repo installed"; return; }
  cd "$APP_DIR" || return
  echo "Pulling latest changes..."
  git fetch origin
  git pull --ff-only origin "$(git rev-parse --abbrev-ref HEAD)"
}

switch_branch() {
  have_repo || { msg "$RED" "No repo installed"; return; }
  cd "$APP_DIR" || return
  git fetch --all --prune
  echo "Available branches:"
  mapfile -t b < <( { git branch --format='%(refname:short)'; git branch -r --format='%(refname:short)' | sed 's|origin/||'; } | sort -u )
  select br in "${b[@]}"; do
    [ -n "$br" ] || continue
    git checkout "$br" || git checkout -b "$br" "origin/$br"
    git pull --ff-only origin "$br" || true
    echo "Now on branch: $(git rev-parse --abbrev-ref HEAD)"
    break
  done
}

# --- Backup/restore ---
do_backup() {
  mkdir -p "$FILES_DIR"
  [ -d "$APP_DIR/images" ] && cp -r "$APP_DIR/images" "$FILES_DIR/"
  [ -d "$APP_DIR/recordings" ] && cp -r "$APP_DIR/recordings" "$FILES_DIR/"
  msg "$GREEN" "Backup complete → $FILES_DIR"
}

do_restore() {
  [ ! -d "$FILES_DIR" ] && { msg "$RED" "No backup folder at $FILES_DIR"; return; }
  [ -d "$FILES_DIR/images" ] && cp -r "$FILES_DIR/images" "$APP_DIR/"
  [ -d "$FILES_DIR/recordings" ] && cp -r "$FILES_DIR/recordings" "$APP_DIR/"
  msg "$GREEN" "Restore complete from $FILES_DIR"
}

# --- Remove repo ---
remove_repo() {
  echo "WARNING: This will delete $APP_DIR and all its contents."
  echo "Images and recordings will be lost unless you back them up."
  read -p "Are you sure? (yes/no): " ans
  [ "$ans" = "yes" ] && rm -rf "$APP_DIR" && echo "Repository removed." || echo "Cancelled."
}

# --- Python env ---
ensure_venv() {
  cd "$APP_DIR" || return
  [ -d venv ] || { echo "Creating virtual environment..."; python3 -m venv venv; }
  echo "Activating virtual environment..."
  source venv/bin/activate
  pip install --upgrade pip
  [ -f requirements.txt ] && pip install -r requirements.txt
  [ -d sstv ] && pip install ./sstv
}

# --- Run mode ---
run_local() {
  have_repo || { msg "$RED" "No repo installed"; return; }
  ensure_venv
  check_requirements
  local branch=$(cd "$APP_DIR" && git rev-parse --abbrev-ref HEAD)
  echo "Launching Flask app on branch '$branch' at port $PORT..."
  trap "deactivate 2>/dev/null; echo 'Exited cleanly.'" EXIT
  FLASK_APP=run.py FLASK_ENV=$ENV flask run --host=0.0.0.0 --port=$PORT
}

# --- Systemd service ---
install_service_confirmed() {
  if [ -f "$SERVICE_FILE" ]; then
    msg "$GREEN" "Systemd service is already installed."
    return
  fi

  echo "Systemd service is not installed."
  read -p "Do you want to install it? (yes/no): " confirm
  if [ "$confirm" != "yes" ]; then
    echo "Systemd service installation cancelled."
    return
  fi

  mkdir -p "$(dirname "$SERVICE_FILE")"
  cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=SSTV Groundstation Web App

[Service]
Type=simple
ExecStart=$APP_DIR/launcher.sh -r
Restart=on-failure

[Install]
WantedBy=default.target
EOF

  systemctl --user daemon-reexec
  systemctl --user enable sstv-groundstation
  msg "$GREEN" "Systemd service installed and enabled."
}

remove_service() {
  systemctl --user disable sstv-groundstation
  rm -f "$SERVICE_FILE"
  msg "$RED" "Systemd service removed."
}

# --- Non-interactive mode ---
run_non_interactive() {
  have_repo || exit 1
  ensure_venv
  check_requirements
  FLASK_APP=run.py FLASK_ENV=$ENV flask run --host=0.0.0.0 --port=$PORT
}

# --- Menu ---
main_menu() {
  while :; do
    clear
    cat <<'EOF'
  +---------------------------+
  |   SSTV Groundstation App  |
  +---------------------------+
EOF
    status_line
    echo
    if ! have_repo; then
      echo "This launcher helps you install and manage the SSTV Groundstation web app."
      echo "You can run it manually or set it to start automatically at boot using systemd."
      echo
      echo "Options:"
      echo "1) Clone main branch"
      echo "2) Exit"
      read -rp "> " c
      case $c in
        1) clone_repo ;;
        2) exit 0 ;;
      esac
    else
      local branch=$(cd "$APP_DIR" && git rev-parse --abbrev-ref HEAD)
      echo "1) Run web app (current: $branch)"
      echo "2) Pull latest (stay on $branch)"
      echo "3) Switch branch"
      echo "4) Backup (images + recordings)"
      echo "5) Restore (from backup)"
      echo "6) Install systemd service"
      if have_service; then
        echo "7) Remove (already installed)"
      else
        echo "7) Remove repo (with warnings)"
      fi
      echo "8) Exit"
      read -rp "> " c
      case $c in
        1) run_local ;;
        2) pull_update ;;
        3) switch_branch ;;
        4) do_backup ;;
        5) do_restore ;;
        6) install_service_confirmed ;;
        7) if have_service; then remove_service; else remove_repo; fi ;;
        8) exit 0 ;;
      esac
    fi
  done
}

# --- Entry point ---
if [[ "${1:-}" == "-r" ]]; then
  run_non_interactive
else
  main_menu
fi
